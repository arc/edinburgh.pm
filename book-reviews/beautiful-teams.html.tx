[% WRAPPER "_page.tt" WITH title = 'Book Review - Beautiful Teams' %]

<b class="header">Beautiful Teams : Inspiring and Cautionary Tales from Veteran Team Leaders</b>

<table class="booktable">
<tr>

<td>
<table class="booktable">
<tr>
<td class="bookdetails">Authors</td><td>Andrew Stellman &amp; Jennifer Greene</td>
</tr>
<tr>
<td class="bookdetails">Publisher</td><td>O'Reilly</td>
</tr>
<tr>
<td class="bookdetails">ISBN</td><td>978-0-596-51802-8</td>
</tr>
<tr>
<td class="bookdetails">Date</td><td>March 2009</td>
</tr>
<tr>
<td class="bookdetails">Pages</td><td>512</td>
</tr>
<tr>
<td class="bookdetails">Price</td><td>&pound;30.99</td>
</tr>
<tr>
<td class="bookdetails">Reviewer</td><td>Roger Spooner</td>
</tr>
</table>
</td>

<td>
<a href="http://oreilly.com/catalog/9780596518028/">
<img alt="Cover image for Beautiful Teams" src="/images/beautiful-teams-cover.png" width="180" height="236">
</a>
</td>

</tr>
</table>

<p>
This book builds upon two noble traditions. Andrew Stellman and Jennifer
Greene have worked togther on several books about project management,
while O'Reilly has been releasing a series of &quot;Beautiful&quot; books about
the real world application of theories we have read so much about.
<p>
This substantial volume (weighing in at over 482 pages) is a set of
personal stories from great people in the software engineering industry.
Many of them have been through tough challenges, worked on major
projects, or dealt with difficult people. The stories span several
decades, across which object oriented design matured, agile methods were
born and dot-coms boomed.
<p>
Because each of the articles has been written by a different author,
they all have a different tone. The editors were clearly very broad in
their intentions for this book, and so while some make specific points
about practices on a particular project, others are anecdotes about a
team an author had been a member of.
<p>
Summarising so many topics is hard, but a number of familiar topics do
come up. The politics and emotions of people are important. Some people
don't listen enough to understand each other; some put a lot of pressure
on their juniors; some are just liars.  The traditional tasks of
requirements capture and testing are still important. In one
pharmaceutical project, two previous teams had begun a project but
forgot to note any of their requirements before giving up, so the
internal customer was frustrated when the third team started asking what
he wanted the system to do. In another project that was not allowed any
testers, pressure was applied by a senior manager to drop the code
reviews and unit testing that was holding it to its requirements.
Another emphasised the importance of tools; peer review of source
commits was far more common on a project where the diff was included in
the email announcing who made a change. Moving the diff onto a web page
or another email is sufficiently hard that almost nobody bothers to
inspect work, and so quality is at risk.
<p>
Perhaps another reason why summarising the topics is hard, is that most
of the articles tend to ramble without a focused topic. Some are
interviews with experts who simply can't tell you why they are great in
ten minutes. One is a personal account of escaping from the World Trade
Centre in 9/11 which make a gripping read but like other chapters, is
pretty straightforward in leadership content. Several are descriptions
of working environments which must have been fascinating places to work,
but the book might still leave you wondering how to make yours a better
place.
<p>
Each of the chapters is an enjoyable read; not long, and quite
light-hearted. Such a book could make good spare-time reading or be a
nice coffee table piece.  It certainly doesn't ram theory down your
throat. But sometimes the theory was rather hard to see at all, and the
conclusion might almost be &quot;stuff happens&quot;.

<p>

[% END %]
